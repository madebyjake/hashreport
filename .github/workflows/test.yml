name: Test

on:
  push:
    branches: [ main, dev ]
    paths:
      - '**.py'
      - 'poetry.lock'
      - 'pyproject.toml'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - '**.py'
      - 'poetry.lock'
      - 'pyproject.toml'
      - '.github/workflows/test.yml'

env:
  POETRY_VIRTUALENVS_CREATE: false
  POETRY_CACHE_DIR: ~/.cache/pypoetry

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for dynamic versioning

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dependencies
        run: poetry install --with dev

      - name: Explicitly install pytest for Python 3.13
        if: matrix.python-version == '3.13'
        run: |
          pip install pytest pytest-cov

      - name: Verify pytest installation
        run: poetry run pip list | grep pytest

      - name: Run tests
        run: python -m pytest --cov=. --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
