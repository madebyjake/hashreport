{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>hashreport</code>","text":"Warning <p>This documentation site is an early work in progress and may contain errors and incomplete information.</p>"},{"location":"#overview","title":"Overview","text":"<p>hashreport is a command-line tool that generates comprehensive hash reports for files within a directory. The reports can be output in CSV or JSON formats and include detailed information such as the file name, path, size, hash algorithm, hash value, and last modified date. Designed for speed and efficiency, hashreport can handle large volumes of files and offers filtering options to include or exclude files based on size, type, or name patterns.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Bulk hash generation for large directories</li> <li>Support for multiple hash algorithms using hashlib</li> <li>Multi-threaded processing for faster performance</li> <li>Test run mode to process a subset of files</li> <li>Output reports in CSV and JSON formats</li> <li>Filter files by size, type, and name patterns</li> <li>Option to provide a file list for inclusion or exclusion</li> <li>Recursive directory traversal to process nested folders</li> <li>Email report upon completion using SMTP</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>See the Installation page for detailed instructions on how to install hashreport.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Basic Usage</li> <li>Advanced Usage</li> <li>Command Reference</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Affero General Public License v3.0.</p>"},{"location":"#issues-and-feedback","title":"Issues and Feedback","text":"<p>Please report any issues or feedback on the GitHub Issues page.</p>"},{"location":"advanced/","title":"Advanced Usage","text":""},{"location":"advanced/#regular-expressions","title":"Regular Expressions","text":"<p>While the basic glob patterns work for simple cases, regex provides more powerful pattern matching capabilities.</p>"},{"location":"advanced/#pattern-examples","title":"Pattern Examples","text":"<p>Use the <code>--regex</code> flag with <code>--include</code> or <code>--exclude</code>:</p> <pre><code># Match files ending in numbers\nhashreport scan --regex --include \".*[0-9]$\" /path/to/directory\n\n# Match specific date formats in filenames\nhashreport scan --regex --include \".*\\d{4}-\\d{2}-\\d{2}.*\" /path/to/directory\n\n# Exclude files with specific patterns\nhashreport scan --regex --exclude \"^(backup|temp).*\" /path/to/directory\n\n# Multiple patterns\nhashreport scan --regex \\\n  --include \".*\\.(jpg|png)$\" \\\n  --exclude \"thumb.*\\.jpg$\" \\\n  /path/to/directory\n</code></pre>"},{"location":"advanced/#filelist-with-patterns","title":"Filelist with Patterns","text":"<p>The filelist command supports the same pattern matching:</p>"},{"location":"advanced/#email-notifications","title":"Email Notifications","text":"<p>hashreport can email reports upon completion using SMTP.</p>"},{"location":"advanced/#basic-email-setup","title":"Basic Email Setup","text":"<pre><code>hashreport scan /path/to/directory \\\n  --email recipient@example.com \\\n  --smtp-host smtp.example.com \\\n  --smtp-user username \\\n  --smtp-password password\n</code></pre>"},{"location":"advanced/#testing-email-configuration","title":"Testing Email Configuration","text":"<p>Test your email settings without processing files:</p> <pre><code>hashreport scan /path/to/directory \\\n  --email recipient@example.com \\\n  --smtp-host smtp.example.com \\\n  --smtp-user username \\\n  --smtp-password password \\\n  --test-email\n</code></pre>"},{"location":"advanced/#gmail-example","title":"Gmail Example","text":"<p>Using Gmail's SMTP server:</p> <pre><code>hashreport scan /path/to/directory \\\n  --email recipient@gmail.com \\\n  --smtp-host smtp.gmail.com \\\n  --smtp-port 587 \\\n  --smtp-user your.email@gmail.com \\\n  --smtp-password \"your-app-password\"\n</code></pre> <p>Note</p> <p>For Gmail, you'll need to use an App Password if you have 2-factor authentication enabled. Generate one at: Google Account \u2192 Security \u2192 2-Step Verification \u2192 App passwords</p>"},{"location":"advanced/#environment-variables","title":"Environment Variables","text":"<p>You can store SMTP credentials in environment variables:</p> <pre><code>export HASHREPORT_SMTP_HOST=smtp.example.com\nexport HASHREPORT_SMTP_USER=username\nexport HASHREPORT_SMTP_PASSWORD=password\n\n# Now run without exposing credentials in command\nhashreport scan /path/to/directory --email recipient@example.com\n</code></pre>"},{"location":"advanced/#performance-tuning","title":"Performance Tuning","text":""},{"location":"advanced/#worker-threads","title":"Worker Threads","text":"<p>hashreport automatically uses multiple threads based on your CPU cores. You can override this in the configuration:</p> <pre><code># pyproject.toml\n[tool.hashreport]\nmax_workers = 4  # Set specific number of worker threads\n</code></pre>"},{"location":"advanced/#chunk-size","title":"Chunk Size","text":"<p>For large files, you can adjust the chunk size used when calculating hashes:</p> <pre><code># pyproject.toml\n[tool.hashreport]\nchunk_size = 8192  # Default is 4096\n</code></pre>"},{"location":"advanced/#custom-report-names","title":"Custom Report Names","text":""},{"location":"advanced/#timestamp-format","title":"Timestamp Format","text":"<p>Customize the timestamp format used in report filenames:</p> <pre><code># pyproject.toml\n[tool.hashreport]\ntimestamp_format = \"%Y%m%d_%H%M%S\"  # Default is \"%y%m%d-%H%M\"\n</code></pre>"},{"location":"advanced/#output-examples","title":"Output Examples","text":"<pre><code># Custom named reports\nhashreport scan /path/to/directory -o custom_report.csv\n\n# Multiple formats with custom names\nhashreport scan /path/to/directory \\\n  -o report.csv \\\n  -f csv -f json\n</code></pre>"},{"location":"advanced/#report-comparison","title":"Report Comparison","text":""},{"location":"advanced/#understanding-changes","title":"Understanding Changes","text":"<p>The comparison functionality identifies several types of changes:</p> <ul> <li>Modified: File exists in both reports but has different hash values</li> <li>Moved: Same file (identical hash) exists in different locations</li> <li>Added: File exists only in the newer report</li> <li>Removed: File exists only in the older report</li> </ul>"},{"location":"advanced/#output-format","title":"Output Format","text":"<p>Changes are displayed with bold text for better visibility:</p> <ul> <li>Change type is displayed in bold</li> <li>File paths show the original and new locations</li> <li>Details include hash values and change descriptions</li> <li>Complete path information is shown in separate columns</li> </ul>"},{"location":"advanced/#saving-comparisons","title":"Saving Comparisons","text":"<p>Comparison results can be saved to CSV format:</p> <pre><code>hashreport compare old_report.csv new_report.csv -o /path/to/output/\n</code></pre> <p>The output filename will be generated automatically using the format: <code>compare_&lt;old_report&gt;_&lt;new_report&gt;.csv</code></p>"},{"location":"advanced/#using-with-version-control","title":"Using with Version Control","text":"<p>Example workflow for tracking file changes:</p> <pre><code># Generate baseline report\nhashreport scan /project/dir -o baseline.csv\n\n# Later, generate new report\nhashreport scan /project/dir -o current.csv\n\n# Compare changes\nhashreport compare baseline.csv current.csv\n</code></pre>"},{"location":"basic/","title":"Basic Usage","text":""},{"location":"basic/#command-structure","title":"Command Structure","text":"<p>The basic command structure is:</p> <pre><code>hashreport scan [OPTIONS] DIRECTORY\n</code></pre>"},{"location":"basic/#core-commands","title":"Core Commands","text":""},{"location":"basic/#scanning-a-directory","title":"Scanning a Directory","text":"<p>To scan a directory and generate a hash report:</p> <pre><code>hashreport scan /path/to/directory\n</code></pre>"},{"location":"basic/#choosing-hash-algorithm","title":"Choosing Hash Algorithm","text":"<p>You can specify which hash algorithm to use:</p> <pre><code>hashreport scan --algorithm sha256 /path/to/directory\n</code></pre> <p>To see available hash algorithms:</p> <pre><code>hashreport algorithms\n</code></pre>"},{"location":"basic/#output-formats","title":"Output Formats","text":"<p>hashreport supports CSV (default) and JSON output formats:</p> <pre><code># Generate CSV report (default)\nhashreport scan -f csv /path/to/directory\n\n# Generate JSON report\nhashreport scan -f json /path/to/directory\n\n# Generate both formats\nhashreport scan -f csv -f json /path/to/directory\n</code></pre>"},{"location":"basic/#specifying-output-location","title":"Specifying Output Location","text":"<p>Control where reports are saved:</p> <pre><code>hashreport scan /path/to/directory -o /path/to/output/\n</code></pre>"},{"location":"basic/#filtering-options","title":"Filtering Options","text":""},{"location":"basic/#size-filters","title":"Size Filters","text":"<p>Filter files by size:</p> <pre><code># Files larger than 1MB\nhashreport scan --min-size 1MB /path/to/directory\n\n# Files smaller than 1GB\nhashreport scan --max-size 1GB /path/to/directory\n\n# Files between 1MB and 1GB\nhashreport scan --min-size 1MB --max-size 1GB /path/to/directory\n</code></pre>"},{"location":"basic/#pattern-matching","title":"Pattern Matching","text":"<p>Include or exclude files by pattern:</p> <pre><code># Include only .txt files\nhashreport scan --include \"*.txt\" /path/to/directory\n\n# Exclude .tmp files\nhashreport scan --exclude \"*.tmp\" /path/to/directory\n\n# Use regex patterns\nhashreport scan --regex --include \".*\\.txt$\" /path/to/directory\n</code></pre>"},{"location":"basic/#processing-control","title":"Processing Control","text":"<p>Control how files are processed:</p> <pre><code># Limit number of files\nhashreport scan --limit 100 /path/to/directory\n\n# Disable recursive scanning\nhashreport scan --no-recursive /path/to/directory\n</code></pre>"},{"location":"basic/#file-listing","title":"File Listing","text":"<p>Generate a list of files without calculating hashes:</p> <pre><code>hashreport filelist /path/to/directory\n</code></pre>"},{"location":"basic/#viewing-reports","title":"Viewing Reports","text":"<p>View report contents in a paginated format:</p> <pre><code># View entire report\nhashreport view hashreport_&lt;timestamp&gt;.csv\n\n# Filter report entries\nhashreport view hashreport_&lt;timestamp&gt;.csv -f \"mydoc\"\n</code></pre>"},{"location":"basic/#comparing-reports","title":"Comparing Reports","text":"<p>Compare two reports to identify changes:</p> <pre><code># View differences between reports\nhashreport compare hashreport_&lt;old&gt;.csv hashreport_&lt;new&gt;.csv\n\n# Save comparison results\nhashreport compare hashreport_&lt;old&gt;.csv hashreport_&lt;new&gt;.csv -o /path/to/output/\n</code></pre> <p>The comparison will show:</p> <ul> <li>Modified files (hash changed)</li> <li>Moved files (same hash, different location)</li> <li>Added files (new in second report)</li> <li>Removed files (missing in second report)</li> </ul>"},{"location":"basic/#configuration-management","title":"Configuration Management","text":"<p>hashreport settings can be managed using the <code>config</code> command:</p>"},{"location":"basic/#initialize-settings","title":"Initialize Settings","text":"<p>Create a default settings file:</p> <pre><code># Create in default location (~/.config/hashreport/settings.toml)\nhashreport config init\n\n# Create in custom location\nhashreport config init ./my-settings.toml\n</code></pre>"},{"location":"basic/#view-settings","title":"View Settings","text":"<p>Display current configuration:</p> <pre><code>hashreport config show\n</code></pre>"},{"location":"basic/#edit-settings","title":"Edit Settings","text":"<p>Open settings in your default text editor:</p> <pre><code>hashreport config edit\n</code></pre> <p>The editor used is determined by: 1. $VISUAL environment variable 2. $EDITOR environment variable 3. Platform default (vi/vim on Unix, notepad on Windows)</p> <p>Settings are automatically validated when saved.</p>"},{"location":"basic/#getting-help","title":"Getting Help","text":"<p>For detailed information about available options:</p> <pre><code>hashreport --help\nhashreport scan --help\n</code></pre>"},{"location":"commands/","title":"Command Reference","text":""},{"location":"commands/#global-options","title":"Global Options","text":"<p>These options are available for all commands:</p> Option Description <code>-h</code>, <code>--help</code> Show help message and exit <code>--version</code> Show version information"},{"location":"commands/#scan-command-options","title":"Scan Command Options","text":"<p>The <code>scan</code> command is the primary command for generating hash reports. Here are all available options:</p> Option Default Description <code>DIRECTORY</code> Required Path to scan for files <code>-o</code>, <code>--output</code> Current directory Output directory or file path <code>-a</code>, <code>--algorithm</code> md5 Hash algorithm to use <code>-f</code>, <code>--format</code> csv Output format(s) (csv, json) <code>--min-size</code> None Minimum file size (e.g., 1MB) <code>--max-size</code> None Maximum file size (e.g., 1GB) <code>--include</code> None Include files matching pattern <code>--exclude</code> None Exclude files matching pattern <code>--regex</code> False Use regex for pattern matching <code>--limit</code> None Limit number of files to process <code>--recursive/--no-recursive</code> True Process subdirectories recursively <code>--email</code> None Email address to send report to <code>--smtp-host</code> None SMTP server host <code>--smtp-port</code> 587 SMTP server port <code>--smtp-user</code> None SMTP username <code>--smtp-password</code> None SMTP password <code>--test-email</code> False Test email configuration"},{"location":"commands/#filelist-command-options","title":"Filelist Command Options","text":"<p>The <code>filelist</code> command generates a list of all files in a directory. Here are all available options:</p> Option Default Description <code>DIRECTORY</code> Required Path to scan for files <code>-o</code>, <code>--output</code> Current directory Output file path <code>--recursive/--no-recursive</code> True Process subdirectories recursively <code>--include</code> None Include files matching pattern <code>--exclude</code> None Exclude files matching pattern <code>--regex</code> False Use regex for pattern matching"},{"location":"commands/#view-command-options","title":"View Command Options","text":"Option Description <code>REPORT</code> Report file to view <code>-f</code>, <code>--filter</code> Filter report entries"},{"location":"commands/#compare-command-options","title":"Compare Command Options","text":"Option Description <code>REPORT1</code> First report file to compare <code>REPORT2</code> Second report file to compare <code>-o</code>, <code>--output</code> Output directory for comparison report"},{"location":"commands/#config-command-options","title":"Config Command Options","text":"<p>The <code>config</code> command manages user settings:</p> Command Description <code>config init [PATH]</code> Generate default settings file at optional PATH <code>config show</code> Display current settings <code>config edit</code> Edit settings in system default editor <p>Default settings location: <code>~/.config/hashreport/settings.toml</code></p>"},{"location":"commands/#size-format","title":"Size Format","text":"<p>When using <code>--min-size</code> or <code>--max-size</code>, the following formats are supported:</p> Unit Example Description B 1024B Bytes KB 500KB Kilobytes MB 10MB Megabytes GB 1GB Gigabytes"},{"location":"commands/#pattern-matching","title":"Pattern Matching","text":""},{"location":"commands/#glob-patterns-default","title":"Glob Patterns (Default)","text":"<ul> <li><code>*</code> matches any characters</li> <li><code>?</code> matches single character</li> <li><code>[seq]</code> matches any character in seq</li> <li><code>[!seq]</code> matches any character not in seq</li> </ul>"},{"location":"commands/#regex-patterns","title":"Regex Patterns","text":"<p>When using <code>--regex</code>: - <code>.*</code> matches any characters - <code>\\.</code> matches literal dot - <code>$</code> matches end of string - <code>^</code> matches start of string - <code>[0-9]</code> matches any digit</p>"},{"location":"commands/#examples","title":"Examples","text":"<p><pre><code># Basic scan with defaults\nhashreport scan /path/to/directory\n\n# Complex scan with multiple options\nhashreport scan /path/to/directory \\\n  --algorithm sha256 \\\n  -f csv -f json \\\n  --min-size 1MB \\\n  --max-size 1GB \\\n  --include \"*.pdf\" \\\n  --exclude \"*.tmp\" \\\n  --limit 1000 \\\n  -o /path/to/output/report.csv\n\n# Using regex pattern matching\nhashreport scan /path/to/directory \\\n  --regex \\\n  --include \".*\\d{8}.*\\.txt$\" \\\n  --exclude \"^temp_.*\"\n\n# View report contents\nhashreport view report.csv\n\n# Filter report entries\nhashreport view report.csv -f \"*.txt\"\n\n# Compare two reports\nhashreport compare old_report.csv new_report.csv\n\n# Compare and save results\nhashreport compare old_report.csv new_report.csv -o /path/to/output/\n\n# Initialize default settings\nhashreport config init\n\n# Create settings file in specific location\nhashreport config init ./my-settings.toml\n\n# View current settings\nhashreport config show\n\n# Edit settings in default editor\nhashreport config edit\n</code></pre> ````</p>"},{"location":"install/","title":"Installation","text":"<p>There are a two ways to install hashreport on your system. Choose the option that works best for you:</p>"},{"location":"install/#install-with-pip","title":"Install with Pip","text":"<p>You can install hashreport using <code>pip</code> from the Python Package Index (PyPI):</p> <pre><code>pip install hashreport\n</code></pre>"},{"location":"install/#install-from-source","title":"Install from Source","text":""},{"location":"install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3 (tested with 3.10+)</li> <li>Git (optional)</li> </ul>"},{"location":"install/#1-download-the-repository","title":"1. Download the Repository","text":"<p>Clone the repository to your local machine using Git and navigate to the project directory:</p> <pre><code>git clone https://github.com/madebyjake/hashreport.git &amp;&amp; cd hashreport\n</code></pre> <p>Alternatively, you can download the repository as a ZIP file and extract it to a folder on your machine.</p>"},{"location":"install/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>First we'll install Poetry, a Python packaging and dependency management tool. There are a few ways to do this, but the recommended method is to use the installer script:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>Next, install the project dependencies using Poetry:</p> <pre><code>poetry install\n</code></pre>"},{"location":"install/#3-run-the-application","title":"3. Run the Application","text":"<p>You can now run the application using Poetry:</p> <pre><code>poetry run hashreport --version\n</code></pre>"},{"location":"development/scripts/","title":"Project Scripts","text":"<p>The scripts directory contains scripts that can be used for various common project actions. These scripts are intended to be run from the project root directory.</p>"},{"location":"development/scripts/#run-script","title":"Run Script","text":"<p><code>scripts/run.sh</code></p> <p>The <code>run.sh</code> script is the main entry point for running project scripts, however, the scripts in the <code>actions</code> directory can also be run directly if desired.</p>"},{"location":"development/scripts/#options","title":"Options","text":"<p>The <code>run.sh</code> script provides a quick way to run various project actions. The following options are available:</p> <ul> <li><code>-h</code>, <code>--help</code>: show help message and exit</li> <li><code>test</code>: run tests with coverage</li> <li><code>security</code>: check for security issues</li> <li><code>lint</code>: lint the code</li> <li><code>format</code>: format code</li> <li><code>install</code>: install dependencies</li> <li><code>setup-hooks</code>: setup pre-commit hooks</li> <li><code>pre-commit</code>: run pre-commit hooks</li> </ul>"},{"location":"development/scripts/#usage","title":"Usage","text":""},{"location":"development/scripts/#interactive","title":"Interactive","text":"<p>The <code>run.sh</code> script can also be run in interactive mode. To do this, simply run the script without any options:</p> <pre><code>bash scripts/run.sh\n</code></pre> <p>This will prompt you to select an action to run.</p>"},{"location":"development/scripts/#non-interactive","title":"Non-Interactive","text":"<p>To run a specific action without being prompted, you can pass the action as an option:</p> <pre><code>bash scripts/run.sh [OPTION] [FLAGS]\n</code></pre> <p>For example, to run tests with coverage:</p> <pre><code>bash scripts/run.sh test\n</code></pre>"}]}